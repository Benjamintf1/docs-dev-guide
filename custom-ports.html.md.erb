---
title: Configuring CF to route traffic to apps on custom ports
owner: CF for VMs Networking
---

<%# Reset page title based on platform type %>
<% if vars.platform_code != 'CF' %>

<% set_title("Configuring", vars.app_runtime_abbr, "to Route Traffic to Apps on Custom Ports") %>

<% end %>


By default, apps only receive requests on port 8080 for both HTTP and TCP routing, and so must be configured, or hardcoded, to listen on this port. Configuring custom app ports allows developers to bring workloads onto <%= vars.app_runtime_abbr %> that listen on ports other than 8080. Some example use cases are:

* Serving web client requests on one port and offering stats/debug on another

* Using TCP protocols that require multiple ports

* Running Docker images on <%= vars.app_runtime_abbr %>

The procedure below describes how to use the `apps` and `route_mappings` Cloud Controller API endpoints to update the ports the app can receive requests on.

### <a id="flow"></a> Flow of a Request to an App

## <a id='flow'></a> Flow of a request to an app

The following table describes the Network Address Translation that occurs in the data path of a client request.

| Port Type | Description | Network Hop |
| --------- | ----------- | ----------- |
| Route port | The port a client sends a request to | Client to load balancer, load balancer to Gorouter |
| Back end port | The port on the VM where an app container is hosted, which is unique to the container | Gorouter to Diego Cell |
| App port | The port on the container; this must match a port the app is configured to listen on | Diego Cell to app container |

The following diagram provides an example data path and Network Address Translation for TCP routing. For HTTP routing, the route port is always 80 or 443.

![alt-text="Traffic-flow-diagram"](./images/route_ports.png)

For HTTP routing, the route port is always `80` or `443`.


## <a id="prerequisite"></a> Prerequisites

Before following the procedure to configure routing to your app on custom ports, you must have:

* An app pushed to <%= vars.app_runtime_abbr %> that can listen on one or more custom ports.

* Routes for which you want traffic forwarded to your app on custom ports, which are mapped to the app.

<p class="note">
<span class="note__title">Note</span>
If your app receives requests on two ports, and you want clients to be able to send requests to both of them, create
two routes. These routes can be from HTTP or TCP domains. In <a href="#procedure">Procedure</a> below, you use API endpoints to map these routes to your app on the ports it uses to receive requests. For more information, see <a href="deploy-apps/routes-domains.html">Routes and Domains</a>.</p>


## <a id="procedure"></a> Procedure

To configure your app to receive HTTP or TCP traffic on custom ports:

1. Retrieve the GUID of your app by running:

    ```console
    cf app APP-NAME --guid
    ```

    Where `APP-NAME` is the name of your app.

1. Configure <%= vars.app_runtime_abbr %> with the ports your app is listening on by running:

    ```
    cf curl /v2/apps/APP-GUID -X PUT -d '{"ports": [PORT1, PORT2, PORT3...]}'
    ```

    Where:
    <ul>
      <li><code>APP-GUID</code> is the GUID of your app.</li>
      <li><code>PORT1, PORT2, PORT3...</code> is a comma-separated list of the ports on which you want your app to receive traffic.</li>
    </ul>


1. Retrieve the GUID of the route to which clients make requests, and for which <%= vars.app_runtime_abbr %> routes requests to the app on a custom port. Use one of the following options:
      - For a TCP route with a hostname, retrieve its GUID by running:

          ```
          cf curl /v2/routes?q=host:HOST-NAME
          ```
          Where `HOST-NAME` is the hostname for the route. By default, this is the name of your app.
      - For a TCP route without a hostname, retrieve its GUID by running:

          ```
          cf curl /v2/apps/APP-GUID/routes
          ```

1. Check and update the route mappings for your app by running:

    ```
    cf curl /v2/routes/ROUTE-GUID/route_mappings
    cf curl /v2/route_mappings -X POST -d '{"app_guid": "APP-GUID", "route_guid": "ROUTE-GUID", "app_port": PORT1}'
    ```

    Where:
    <ul>
      <li><code>APP-GUID</code> is the GUID of your app.</li>
      <li><code>ROUTE-GUID</code> is the GUID of the route at which the app serves.</li>
      <li><code>PORT1</code> is the app port, or one of the app ports, that you added in the previous step.</li>
    </ul>

1. Repeat the previous two steps for each port that you want your app to receive requests on.

<p class="note important">
<span class="note__title">Important</span>
If you are trying to remove an app port, you need to delete the associated route mapping before you can update the app to remove the port.</p>


## <a id='additional-resources'></a> Additional resources

For additional resources related to configuring custom app ports:

* For more information about making requests to the Cloud Controller `apps` endpoint, see [Updating an App](https://apidocs.cloudfoundry.org/6.10.0/apps/updating_an_app.html) in the Cloud Controller API documentation.

* For more information about making requests to the Cloud Controller `route_mappings` endpoint, see [Mapping an App and a Route](https://apidocs.cloudfoundry.org/6.10.0/routes_mapping/mapping_an_app_and_a_route.html) in the Cloud Controller API documentation.

* For an example multi-port app, see the [cf-acceptance-tests](https://github.com/cloudfoundry/cf-acceptance-tests/tree/develop/assets/multi-port-app) repository on GitHub.

* For a demo procedure written by an open source CF user, see the ["Multiple App Ports" Demo on Cloud Foundry](https://gist.github.com/nota-ja/ef56ea0584ae2b37d6d3a535efe2d4ee) on GitHub.
